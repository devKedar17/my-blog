{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setdoc } from 'firebase/firestore';\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDY61eDhRkTenfWW1aGW_SyFkNaMzzqvII\",\n  authDomain: \"my-blog-db-db7f6.firebaseapp.com\",\n  projectId: \"my-blog-db-db7f6\",\n  storageBucket: \"my-blog-db-db7f6.appspot.com\",\n  messagingSenderId: \"1087866682834\",\n  appId: \"1:1087866682834:web:33be71533fb96ece6ddc0b\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopUp = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setdoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (e) {\n      console.log('error occured during creation of user', e.message);\n    }\n  }\n  return use;\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setdoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopUp","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","e","message","use"],"sources":["D:/React/my-blog/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\nimport {\r\n  getAuth,\r\n  signInWithPopup, \r\n  GoogleAuthProvider\r\n} from 'firebase/auth';\r\n\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  setdoc\r\n} from 'firebase/firestore';\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDY61eDhRkTenfWW1aGW_SyFkNaMzzqvII\",\r\n  authDomain: \"my-blog-db-db7f6.firebaseapp.com\",\r\n  projectId: \"my-blog-db-db7f6\",\r\n  storageBucket: \"my-blog-db-db7f6.appspot.com\",\r\n  messagingSenderId: \"1087866682834\",\r\n  appId: \"1:1087866682834:web:33be71533fb96ece6ddc0b\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nprovider.setCustomParameters({\r\n  prompt: \"select_account\"\r\n});\r\n\r\nexport const auth = getAuth();\r\n\r\nexport const signInWithGooglePopUp = () => signInWithPopup(auth,provider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (userAuth) => {\r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n  console.log(userDocRef);\r\n\r\n  const userSnapshot= await getDoc(userDocRef);\r\n  console.log(userSnapshot);\r\n  if(!userSnapshot.exists()){\r\n    const {displayName,email} = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try{\r\n        await setdoc(userDocRef,{\r\n          displayName,\r\n          email,\r\n          createdAt\r\n        });\r\n    }catch(e){\r\n        console.log('error occured during creation of user',e.message);\r\n    }\r\n\r\n  }\r\n  return use\r\n}"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C;AACA;AACA,SACEC,OAAO,EACPC,eAAe,EACfC,kBAAkB,QACb,eAAe;AAEtB,SACEC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,QACD,oBAAoB;AAC3B;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,kCAAkC;EAC9CC,SAAS,EAAE,kBAAkB;EAC7BC,aAAa,EAAE,8BAA8B;EAC7CC,iBAAiB,EAAE,eAAe;EAClCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGf,aAAa,CAACQ,cAAc,CAAC;AAEjD,MAAMQ,QAAQ,GAAG,IAAIb,kBAAkB,CAAC,CAAC;AAEzCa,QAAQ,CAACC,mBAAmB,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGlB,OAAO,CAAC,CAAC;AAE7B,OAAO,MAAMmB,qBAAqB,GAAGA,CAAA,KAAMlB,eAAe,CAACiB,IAAI,EAACH,QAAQ,CAAC;AAEzE,OAAO,MAAMK,EAAE,GAAGjB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMkB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC5D,MAAMC,UAAU,GAAGnB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EACjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAE,MAAMtB,MAAM,CAACkB,UAAU,CAAC;EAC5CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EACzB,IAAG,CAACA,YAAY,CAACC,MAAM,CAAC,CAAC,EAAC;IACxB,MAAM;MAACC,WAAW;MAACC;IAAK,CAAC,GAAGR,QAAQ;IACpC,MAAMS,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE5B,IAAG;MACC,MAAM1B,MAAM,CAACiB,UAAU,EAAC;QACtBM,WAAW;QACXC,KAAK;QACLC;MACF,CAAC,CAAC;IACN,CAAC,QAAME,CAAC,EAAC;MACLR,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAACO,CAAC,CAACC,OAAO,CAAC;IAClE;EAEF;EACA,OAAOC,GAAG;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}