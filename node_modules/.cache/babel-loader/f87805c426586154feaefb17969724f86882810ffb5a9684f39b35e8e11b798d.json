{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, addDoc, doc, getDoc, setDoc, updateDoc, collection, query, getDocs, deleteDoc } from 'firebase/firestore';\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDY61eDhRkTenfWW1aGW_SyFkNaMzzqvII\",\n  authDomain: \"my-blog-db-db7f6.firebaseapp.com\",\n  projectId: \"my-blog-db-db7f6\",\n  storageBucket: \"my-blog-db-db7f6.appspot.com\",\n  messagingSenderId: \"1087866682834\",\n  appId: \"1:1087866682834:web:33be71533fb96ece6ddc0b\"\n};\n\n//Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopUp = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  //console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  //console.log(userSnapshot);\n  const {\n    displayName,\n    email,\n    photoURL,\n    uid\n  } = userAuth;\n  const createdAt = new Date();\n  if (!userSnapshot.exists()) {\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        uid,\n        photoURL,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (e) {\n      console.log('error occured during creation of user', e.message);\n    }\n  } else {\n    const loginTime = new Date();\n    try {\n      await updateDoc(userDocRef, {\n        loginTime\n      });\n    } catch (e) {\n      console.log('error occured during updation of user', e.message);\n    }\n    //return userDocRef;\n  }\n  ;\n};\nexport const updateUserLoginTime = async userAuth => {\n  try {\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    const loginTime = new Date();\n    await updateDoc(userDocRef, {\n      loginTime\n    });\n  } catch (e) {\n    console.log('error occured during updation of user', e.message);\n  }\n};\nexport const insertUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\n//create contact documents\n\nexport const createContactDocument = async contactInfo => {\n  //console.log(contactInfo);\n  const contactDocRef = doc(db, 'contacts', contactInfo.email);\n  const {\n    name,\n    email,\n    phone,\n    subject,\n    message\n  } = contactInfo;\n  const createdAt = new Date();\n  try {\n    await setDoc(contactDocRef, {\n      name,\n      email,\n      phone,\n      subject,\n      message,\n      createdAt\n    });\n    return email;\n  } catch (e) {\n    console.log('error occured during creation of contact', e.message);\n  }\n};\n\n//get all contact messages with id\nexport const getAllContactMessage = async () => {\n  const collectionRef = collection(db, 'contacts');\n  const q = query(collectionRef);\n  //console.log(q);\n  const querySnapshot = await getDocs(q);\n  return querySnapshot;\n};\n\n//blog document \nexport const createBlogDocument = async data => {\n  const {\n    title,\n    body\n  } = data;\n  // Add a new document with a generated id.\n  const docRef = await addDoc(collection(db, \"posts\"), {\n    title,\n    body\n  });\n};\nexport const updateBlogDocument = async data => {\n  console.log(data);\n  const postDocRef = doc(db, 'posts', data.id);\n  const posttSnapshot = await getDoc(postDocRef);\n  const {\n    title,\n    body\n  } = data;\n  const createdAt = new Date();\n  if (posttSnapshot.exists()) {\n    try {\n      await updateDoc(postDocRef, {\n        title,\n        body,\n        createdAt\n      });\n    } catch (e) {\n      console.log('error occured during updation of contact', e.message);\n    }\n  } else {\n    return postDocRef;\n  }\n  ;\n};\n\n//get all Blog Posts with id\nexport const getAllBlogPost = async () => {\n  const collectionRef = collection(db, 'posts');\n  const q = query(collectionRef);\n  //console.log(q);\n  const querySnapshot = await getDocs(q);\n  return querySnapshot;\n};\nexport const getPostById = async editId => {\n  const docRef = doc(db, 'posts', editId);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    return docSnap.data();\n  } else {\n    // docSnap.data() will be undefined in this case\n    console.log(\"No such document!\");\n  }\n};\nexport const delteBlogPost = async postId => {\n  const docRef = doc(db, 'posts', postId);\n  try {\n    await deleteDoc(doc(db, \"posts\", postId));\n    return true;\n  } catch (error) {\n    console.log('error occured during creation of contact', error.message);\n  }\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListner = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","addDoc","doc","getDoc","setDoc","updateDoc","collection","query","getDocs","deleteDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopUp","db","createUserDocumentFromAuth","userAuth","additionalInformation","arguments","length","undefined","userDocRef","uid","userSnapshot","displayName","email","photoURL","createdAt","Date","exists","e","console","log","message","loginTime","updateUserLoginTime","insertUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","createContactDocument","contactInfo","contactDocRef","name","phone","subject","getAllContactMessage","collectionRef","q","querySnapshot","createBlogDocument","data","title","body","docRef","updateBlogDocument","postDocRef","id","posttSnapshot","getAllBlogPost","getPostById","editId","docSnap","delteBlogPost","postId","error","signOutUser","onAuthStateChangedListner","callback"],"sources":["D:/React/my-blog/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\nimport {\r\n  getAuth,\r\n  signInWithPopup, \r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged\r\n} from 'firebase/auth';\r\n\r\nimport {\r\n  getFirestore,\r\n  addDoc,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  updateDoc,\r\n  collection,\r\n  query,\r\n  getDocs,\r\n  deleteDoc\r\n} from 'firebase/firestore';\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDY61eDhRkTenfWW1aGW_SyFkNaMzzqvII\",\r\n  authDomain: \"my-blog-db-db7f6.firebaseapp.com\",\r\n  projectId: \"my-blog-db-db7f6\",\r\n  storageBucket: \"my-blog-db-db7f6.appspot.com\",\r\n  messagingSenderId: \"1087866682834\",\r\n  appId: \"1:1087866682834:web:33be71533fb96ece6ddc0b\"\r\n};\r\n\r\n//Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nprovider.setCustomParameters({\r\n  prompt: \"select_account\"\r\n});\r\n\r\nexport const auth = getAuth();\r\n\r\nexport const signInWithGooglePopUp = () => signInWithPopup(auth,provider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\r\n  if(!userAuth) return;\r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n  //console.log(userDocRef);\r\n  const userSnapshot= await getDoc(userDocRef);\r\n  //console.log(userSnapshot);\r\n  const {displayName,email,photoURL,uid} = userAuth;\r\n  const createdAt = new Date();\r\n  if(!userSnapshot.exists()){\r\n\r\n    try{\r\n        await setDoc(userDocRef,{\r\n          displayName,\r\n          email,\r\n          uid,\r\n          photoURL,\r\n          createdAt,\r\n          ...additionalInformation\r\n        });\r\n    }catch(e){\r\n        console.log('error occured during creation of user',e.message);\r\n    }\r\n\r\n  }else{\r\n    const loginTime= new Date();\r\n      try{\r\n        await updateDoc(userDocRef,{\r\n          loginTime\r\n        });\r\n    }catch(e){\r\n        console.log('error occured during updation of user',e.message);\r\n    }\r\n      //return userDocRef;\r\n  };\r\n \r\n\r\n  \r\n}\r\nexport const  updateUserLoginTime = async (userAuth) =>{\r\n  \r\n  try{\r\n    \r\n    const userDocRef = doc(db, 'users', userAuth.uid);\r\n    const loginTime= new Date();\r\n    await updateDoc(userDocRef,{\r\n      loginTime\r\n    });\r\n  }catch(e){\r\n    console.log('error occured during updation of user',e.message);\r\n  }\r\n}\r\nexport const insertUserWithEmailAndPassword = async (email,password) => {\r\n  if(!email || !password) return;\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n}\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\r\n\r\n  if(!email || !password) return;\r\n  return await signInWithEmailAndPassword(auth , email, password);\r\n  \r\n \r\n}\r\n\r\n//create contact documents\r\n\r\nexport const createContactDocument = async (contactInfo) => {\r\n  //console.log(contactInfo);\r\n  const contactDocRef = doc(db, 'contacts', contactInfo.email);\r\n  const {name,email,phone,subject,message} = contactInfo;\r\n  const createdAt = new Date();\r\n\r\n    try{\r\n        await setDoc(contactDocRef,{\r\n          name,\r\n          email,\r\n          phone,\r\n          subject,\r\n          message,\r\n          createdAt\r\n        });\r\n        return email;\r\n    }catch(e){\r\n        console.log('error occured during creation of contact',e.message);\r\n    }\r\n\r\n}\r\n\r\n//get all contact messages with id\r\nexport const getAllContactMessage = async () => {\r\n  const collectionRef =collection(db, 'contacts');\r\n  const q= query(collectionRef);\r\n  //console.log(q);\r\n  const querySnapshot = await getDocs(q);\r\n  return querySnapshot;\r\n}\r\n\r\n//blog document \r\nexport const createBlogDocument = async (data)=>{\r\n  const {title, body } = data;\r\n  // Add a new document with a generated id.\r\n  const docRef = await addDoc(collection(db, \"posts\"), {\r\n    title,\r\n    body\r\n  });\r\n}\r\nexport const updateBlogDocument = async (data)=>{\r\n  console.log(data)\r\n  const postDocRef = doc(db, 'posts', data.id);\r\n  const posttSnapshot= await getDoc(postDocRef);\r\n  const {title, body } = data;\r\n  const createdAt = new Date();\r\n  if(posttSnapshot.exists()){\r\n\r\n    try{\r\n        await updateDoc(postDocRef,{\r\n          title,\r\n          body,\r\n          createdAt\r\n        });\r\n    }catch(e){\r\n        console.log('error occured during updation of contact',e.message);\r\n    }\r\n\r\n  }else{\r\n      return postDocRef;\r\n  };\r\n \r\n}\r\n\r\n//get all Blog Posts with id\r\nexport const getAllBlogPost = async () => {\r\n  const collectionRef =collection(db, 'posts');\r\n  const q= query(collectionRef);\r\n  //console.log(q);\r\n  const querySnapshot = await getDocs(q);\r\n  return querySnapshot;\r\n}\r\nexport const getPostById= async (editId) =>{\r\n  const docRef = doc(db,'posts',editId);\r\n  const docSnap = await getDoc(docRef);\r\n\r\n  if (docSnap.exists()) {\r\n    return docSnap.data();\r\n  } else {\r\n    // docSnap.data() will be undefined in this case\r\n    console.log(\"No such document!\");\r\n  }\r\n}\r\nexport const delteBlogPost= async (postId) => {\r\n  const docRef = doc(db,'posts',postId);\r\n \r\n    try{\r\n      await deleteDoc(doc(db, \"posts\", postId));\r\n      return true;\r\n    }catch(error){\r\n      console.log('error occured during creation of contact',error.message);\r\n    }\r\n  \r\n}\r\n\r\nexport const signOutUser = async () => await signOut(auth);\r\n\r\nexport const onAuthStateChangedListner = (callback) =>  onAuthStateChanged(auth, callback );"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C;AACA,SACEC,OAAO,EACPC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,EACPC,kBAAkB,QACb,eAAe;AAEtB,SACEC,YAAY,EACZC,MAAM,EACNC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,SAAS,QACJ,oBAAoB;AAC3B;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,kCAAkC;EAC9CC,SAAS,EAAE,kBAAkB;EAC7BC,aAAa,EAAE,8BAA8B;EAC7CC,iBAAiB,EAAE,eAAe;EAClCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGzB,aAAa,CAACkB,cAAc,CAAC;AAEjD,MAAMQ,QAAQ,GAAG,IAAIvB,kBAAkB,CAAC,CAAC;AAEzCuB,QAAQ,CAACC,mBAAmB,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAG5B,OAAO,CAAC,CAAC;AAE7B,OAAO,MAAM6B,qBAAqB,GAAGA,CAAA,KAAM5B,eAAe,CAAC2B,IAAI,EAACH,QAAQ,CAAC;AAEzE,OAAO,MAAMK,EAAE,GAAGvB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMwB,0BAA0B,GAAG,eAAAA,CAAOC,QAAQ,EAAiC;EAAA,IAA/BC,qBAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACnF,IAAG,CAACF,QAAQ,EAAE;EACd,MAAMK,UAAU,GAAG5B,GAAG,CAACqB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACM,GAAG,CAAC;EACjD;EACA,MAAMC,YAAY,GAAE,MAAM7B,MAAM,CAAC2B,UAAU,CAAC;EAC5C;EACA,MAAM;IAACG,WAAW;IAACC,KAAK;IAACC,QAAQ;IAACJ;EAAG,CAAC,GAAGN,QAAQ;EACjD,MAAMW,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC5B,IAAG,CAACL,YAAY,CAACM,MAAM,CAAC,CAAC,EAAC;IAExB,IAAG;MACC,MAAMlC,MAAM,CAAC0B,UAAU,EAAC;QACtBG,WAAW;QACXC,KAAK;QACLH,GAAG;QACHI,QAAQ;QACRC,SAAS;QACT,GAAGV;MACL,CAAC,CAAC;IACN,CAAC,QAAMa,CAAC,EAAC;MACLC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAACF,CAAC,CAACG,OAAO,CAAC;IAClE;EAEF,CAAC,MAAI;IACH,MAAMC,SAAS,GAAE,IAAIN,IAAI,CAAC,CAAC;IACzB,IAAG;MACD,MAAMhC,SAAS,CAACyB,UAAU,EAAC;QACzBa;MACF,CAAC,CAAC;IACN,CAAC,QAAMJ,CAAC,EAAC;MACLC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAACF,CAAC,CAACG,OAAO,CAAC;IAClE;IACE;EACJ;EAAC;AAIH,CAAC;AACD,OAAO,MAAOE,mBAAmB,GAAG,MAAOnB,QAAQ,IAAI;EAErD,IAAG;IAED,MAAMK,UAAU,GAAG5B,GAAG,CAACqB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACM,GAAG,CAAC;IACjD,MAAMY,SAAS,GAAE,IAAIN,IAAI,CAAC,CAAC;IAC3B,MAAMhC,SAAS,CAACyB,UAAU,EAAC;MACzBa;IACF,CAAC,CAAC;EACJ,CAAC,QAAMJ,CAAC,EAAC;IACPC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAACF,CAAC,CAACG,OAAO,CAAC;EAChE;AACF,CAAC;AACD,OAAO,MAAMG,8BAA8B,GAAG,MAAAA,CAAOX,KAAK,EAACY,QAAQ,KAAK;EACtE,IAAG,CAACZ,KAAK,IAAI,CAACY,QAAQ,EAAE;EACxB,OAAO,MAAMlD,8BAA8B,CAACyB,IAAI,EAAEa,KAAK,EAAEY,QAAQ,CAAC;AACpE,CAAC;AAED,OAAO,MAAMC,kCAAkC,GAAG,MAAAA,CAAOb,KAAK,EAAEY,QAAQ,KAAK;EAE3E,IAAG,CAACZ,KAAK,IAAI,CAACY,QAAQ,EAAE;EACxB,OAAO,MAAMjD,0BAA0B,CAACwB,IAAI,EAAGa,KAAK,EAAEY,QAAQ,CAAC;AAGjE,CAAC;;AAED;;AAEA,OAAO,MAAME,qBAAqB,GAAG,MAAOC,WAAW,IAAK;EAC1D;EACA,MAAMC,aAAa,GAAGhD,GAAG,CAACqB,EAAE,EAAE,UAAU,EAAE0B,WAAW,CAACf,KAAK,CAAC;EAC5D,MAAM;IAACiB,IAAI;IAACjB,KAAK;IAACkB,KAAK;IAACC,OAAO;IAACX;EAAO,CAAC,GAAGO,WAAW;EACtD,MAAMb,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;EAE1B,IAAG;IACC,MAAMjC,MAAM,CAAC8C,aAAa,EAAC;MACzBC,IAAI;MACJjB,KAAK;MACLkB,KAAK;MACLC,OAAO;MACPX,OAAO;MACPN;IACF,CAAC,CAAC;IACF,OAAOF,KAAK;EAChB,CAAC,QAAMK,CAAC,EAAC;IACLC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAACF,CAAC,CAACG,OAAO,CAAC;EACrE;AAEJ,CAAC;;AAED;AACA,OAAO,MAAMY,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,MAAMC,aAAa,GAAEjD,UAAU,CAACiB,EAAE,EAAE,UAAU,CAAC;EAC/C,MAAMiC,CAAC,GAAEjD,KAAK,CAACgD,aAAa,CAAC;EAC7B;EACA,MAAME,aAAa,GAAG,MAAMjD,OAAO,CAACgD,CAAC,CAAC;EACtC,OAAOC,aAAa;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,IAAI,IAAG;EAC9C,MAAM;IAACC,KAAK;IAAEC;EAAK,CAAC,GAAGF,IAAI;EAC3B;EACA,MAAMG,MAAM,GAAG,MAAM7D,MAAM,CAACK,UAAU,CAACiB,EAAE,EAAE,OAAO,CAAC,EAAE;IACnDqC,KAAK;IACLC;EACF,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAME,kBAAkB,GAAG,MAAOJ,IAAI,IAAG;EAC9CnB,OAAO,CAACC,GAAG,CAACkB,IAAI,CAAC;EACjB,MAAMK,UAAU,GAAG9D,GAAG,CAACqB,EAAE,EAAE,OAAO,EAAEoC,IAAI,CAACM,EAAE,CAAC;EAC5C,MAAMC,aAAa,GAAE,MAAM/D,MAAM,CAAC6D,UAAU,CAAC;EAC7C,MAAM;IAACJ,KAAK;IAAEC;EAAK,CAAC,GAAGF,IAAI;EAC3B,MAAMvB,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC5B,IAAG6B,aAAa,CAAC5B,MAAM,CAAC,CAAC,EAAC;IAExB,IAAG;MACC,MAAMjC,SAAS,CAAC2D,UAAU,EAAC;QACzBJ,KAAK;QACLC,IAAI;QACJzB;MACF,CAAC,CAAC;IACN,CAAC,QAAMG,CAAC,EAAC;MACLC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAACF,CAAC,CAACG,OAAO,CAAC;IACrE;EAEF,CAAC,MAAI;IACD,OAAOsB,UAAU;EACrB;EAAC;AAEH,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMZ,aAAa,GAAEjD,UAAU,CAACiB,EAAE,EAAE,OAAO,CAAC;EAC5C,MAAMiC,CAAC,GAAEjD,KAAK,CAACgD,aAAa,CAAC;EAC7B;EACA,MAAME,aAAa,GAAG,MAAMjD,OAAO,CAACgD,CAAC,CAAC;EACtC,OAAOC,aAAa;AACtB,CAAC;AACD,OAAO,MAAMW,WAAW,GAAE,MAAOC,MAAM,IAAI;EACzC,MAAMP,MAAM,GAAG5D,GAAG,CAACqB,EAAE,EAAC,OAAO,EAAC8C,MAAM,CAAC;EACrC,MAAMC,OAAO,GAAG,MAAMnE,MAAM,CAAC2D,MAAM,CAAC;EAEpC,IAAIQ,OAAO,CAAChC,MAAM,CAAC,CAAC,EAAE;IACpB,OAAOgC,OAAO,CAACX,IAAI,CAAC,CAAC;EACvB,CAAC,MAAM;IACL;IACAnB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EAClC;AACF,CAAC;AACD,OAAO,MAAM8B,aAAa,GAAE,MAAOC,MAAM,IAAK;EAC5C,MAAMV,MAAM,GAAG5D,GAAG,CAACqB,EAAE,EAAC,OAAO,EAACiD,MAAM,CAAC;EAEnC,IAAG;IACD,MAAM/D,SAAS,CAACP,GAAG,CAACqB,EAAE,EAAE,OAAO,EAAEiD,MAAM,CAAC,CAAC;IACzC,OAAO,IAAI;EACb,CAAC,QAAMC,KAAK,EAAC;IACXjC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAACgC,KAAK,CAAC/B,OAAO,CAAC;EACvE;AAEJ,CAAC;AAED,OAAO,MAAMgC,WAAW,GAAG,MAAAA,CAAA,KAAY,MAAM5E,OAAO,CAACuB,IAAI,CAAC;AAE1D,OAAO,MAAMsD,yBAAyB,GAAIC,QAAQ,IAAM7E,kBAAkB,CAACsB,IAAI,EAAEuD,QAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}