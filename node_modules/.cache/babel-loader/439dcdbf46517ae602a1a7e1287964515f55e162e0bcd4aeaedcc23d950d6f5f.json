{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDY61eDhRkTenfWW1aGW_SyFkNaMzzqvII\",\n  authDomain: \"my-blog-db-db7f6.firebaseapp.com\",\n  projectId: \"my-blog-db-db7f6\",\n  storageBucket: \"my-blog-db-db7f6.appspot.com\",\n  messagingSenderId: \"1087866682834\",\n  appId: \"1:1087866682834:web:33be71533fb96ece6ddc0b\"\n};\n\n//Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopUp = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  //console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  //console.log(userSnapshot);\n  const {\n    displayName,\n    email,\n    photoURL,\n    uid\n  } = userAuth;\n  const createdAt = new Date();\n  if (!userSnapshot.exists()) {\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        uid,\n        photoURL,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (e) {\n      console.log('error occured during creation of user', e.message);\n    }\n  } else {\n    const loginTime = new Date();\n    try {\n      await updateDoc(userDocRef, {\n        loginTime\n      });\n    } catch (e) {\n      console.log('error occured during updation of user', e.message);\n    }\n    //return userDocRef;\n  }\n  ;\n};\nexport const updateUserLoginTime = async userAuth => {\n  try {\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    const loginTime = new Date();\n    await updateDoc(userDocRef, {\n      loginTime\n    });\n  } catch (e) {\n    console.log('error occured during updation of user', e.message);\n  }\n};\nexport const insertUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\n//create contact documents\n\nexport const createContactDocument = async contactInfo => {\n  const contactDocRef = doc(db, 'contacts', contactInfo.email);\n  //console.log(userDocRef);\n  const contactSnapshot = await getDoc(contactDocRef);\n  //console.log(userSnapshot);\n  const {\n    displayName,\n    email,\n    photoURL,\n    uid\n  } = contactInfo;\n  const createdAt = new Date();\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","updateDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopUp","db","createUserDocumentFromAuth","userAuth","additionalInformation","arguments","length","undefined","userDocRef","uid","userSnapshot","displayName","email","photoURL","createdAt","Date","exists","e","console","log","message","loginTime","updateUserLoginTime","insertUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","createContactDocument","contactInfo","contactDocRef","contactSnapshot"],"sources":["D:/React/my-blog/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\nimport {\r\n  getAuth,\r\n  signInWithPopup, \r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword\r\n} from 'firebase/auth';\r\n\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  updateDoc\r\n} from 'firebase/firestore';\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDY61eDhRkTenfWW1aGW_SyFkNaMzzqvII\",\r\n  authDomain: \"my-blog-db-db7f6.firebaseapp.com\",\r\n  projectId: \"my-blog-db-db7f6\",\r\n  storageBucket: \"my-blog-db-db7f6.appspot.com\",\r\n  messagingSenderId: \"1087866682834\",\r\n  appId: \"1:1087866682834:web:33be71533fb96ece6ddc0b\"\r\n};\r\n\r\n//Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nprovider.setCustomParameters({\r\n  prompt: \"select_account\"\r\n});\r\n\r\nexport const auth = getAuth();\r\n\r\nexport const signInWithGooglePopUp = () => signInWithPopup(auth,provider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\r\n  if(!userAuth) return;\r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n  //console.log(userDocRef);\r\n  const userSnapshot= await getDoc(userDocRef);\r\n  //console.log(userSnapshot);\r\n  const {displayName,email,photoURL,uid} = userAuth;\r\n  const createdAt = new Date();\r\n  if(!userSnapshot.exists()){\r\n\r\n    try{\r\n        await setDoc(userDocRef,{\r\n          displayName,\r\n          email,\r\n          uid,\r\n          photoURL,\r\n          createdAt,\r\n          ...additionalInformation\r\n        });\r\n    }catch(e){\r\n        console.log('error occured during creation of user',e.message);\r\n    }\r\n\r\n  }else{\r\n    const loginTime= new Date();\r\n      try{\r\n        await updateDoc(userDocRef,{\r\n          loginTime\r\n        });\r\n    }catch(e){\r\n        console.log('error occured during updation of user',e.message);\r\n    }\r\n      //return userDocRef;\r\n   };\r\n \r\n\r\n  \r\n}\r\nexport const  updateUserLoginTime = async (userAuth) =>{\r\n  \r\n  try{\r\n    \r\n    const userDocRef = doc(db, 'users', userAuth.uid);\r\n    const loginTime= new Date();\r\n    await updateDoc(userDocRef,{\r\n      loginTime\r\n    });\r\n  }catch(e){\r\n    console.log('error occured during updation of user',e.message);\r\n  }\r\n}\r\nexport const insertUserWithEmailAndPassword = async (email,password) => {\r\n  if(!email || !password) return;\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n}\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\r\n\r\n  if(!email || !password) return;\r\n  return await signInWithEmailAndPassword(auth , email, password);\r\n  \r\n \r\n}\r\n\r\n//create contact documents\r\n\r\nexport const createContactDocument = async (contactInfo) => {\r\n  const contactDocRef = doc(db, 'contacts', contactInfo.email);\r\n  //console.log(userDocRef);\r\n  const contactSnapshot= await getDoc(contactDocRef);\r\n  //console.log(userSnapshot);\r\n  const {displayName,email,photoURL,uid} = contactInfo;\r\n  const createdAt = new Date();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}