{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDY61eDhRkTenfWW1aGW_SyFkNaMzzqvII\",\n  authDomain: \"my-blog-db-db7f6.firebaseapp.com\",\n  projectId: \"my-blog-db-db7f6\",\n  storageBucket: \"my-blog-db-db7f6.appspot.com\",\n  messagingSenderId: \"1087866682834\",\n  appId: \"1:1087866682834:web:33be71533fb96ece6ddc0b\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopUp = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  //console.log(userSnapshot);\n  const {\n    displayName,\n    email,\n    photoURL,\n    uid\n  } = userAuth;\n  const createdAt = new Date();\n  if (!userSnapshot.exists()) {\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        uid,\n        photoURL,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (e) {\n      console.log('error occured during creation of user', e.message);\n    }\n  } else {\n    const loginTime = new Date();\n    try {\n      await updateDoc(userDocRef, {\n        loginTime\n      });\n    } catch (e) {\n      console.log('error occured during updation of user', e.message);\n    }\n    return userDocRef;\n  }\n  ;\n};\nexport const insertUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","updateDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopUp","db","createUserDocumentFromAuth","userAuth","additionalInformation","arguments","length","undefined","userDocRef","uid","console","log","userSnapshot","displayName","email","photoURL","createdAt","Date","exists","e","message","loginTime","insertUserWithEmailAndPassword","password"],"sources":["D:/React/my-blog/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\nimport {\r\n  getAuth,\r\n  signInWithPopup, \r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword\r\n} from 'firebase/auth';\r\n\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  updateDoc\r\n} from 'firebase/firestore';\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDY61eDhRkTenfWW1aGW_SyFkNaMzzqvII\",\r\n  authDomain: \"my-blog-db-db7f6.firebaseapp.com\",\r\n  projectId: \"my-blog-db-db7f6\",\r\n  storageBucket: \"my-blog-db-db7f6.appspot.com\",\r\n  messagingSenderId: \"1087866682834\",\r\n  appId: \"1:1087866682834:web:33be71533fb96ece6ddc0b\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nprovider.setCustomParameters({\r\n  prompt: \"select_account\"\r\n});\r\n\r\nexport const auth = getAuth();\r\n\r\nexport const signInWithGooglePopUp = () => signInWithPopup(auth,provider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\r\n  if(!userAuth) return;\r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n  console.log(userDocRef);\r\n  const userSnapshot= await getDoc(userDocRef);\r\n  //console.log(userSnapshot);\r\n  const {displayName,email,photoURL,uid} = userAuth;\r\n  const createdAt = new Date();\r\n  if(!userSnapshot.exists()){\r\n\r\n    try{\r\n        await setDoc(userDocRef,{\r\n          displayName,\r\n          email,\r\n          uid,\r\n          photoURL,\r\n          createdAt,\r\n          ...additionalInformation\r\n        });\r\n    }catch(e){\r\n        console.log('error occured during creation of user',e.message);\r\n    }\r\n\r\n  }else{\r\n    const loginTime= new Date();\r\n      try{\r\n        await updateDoc(userDocRef,{\r\n          loginTime\r\n        });\r\n    }catch(e){\r\n        console.log('error occured during updation of user',e.message);\r\n    }\r\n      return userDocRef;\r\n   };\r\n \r\n\r\n  \r\n}\r\n\r\nexport const insertUserWithEmailAndPassword = async (email,password) => {\r\n  if(!email || !password) return;\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n}\r\n\r\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C;AACA;AACA,SACEC,OAAO,EACPC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,QACzB,eAAe;AAEtB,SACEC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNC,SAAS,QACJ,oBAAoB;AAC3B;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,kCAAkC;EAC9CC,SAAS,EAAE,kBAAkB;EAC7BC,aAAa,EAAE,8BAA8B;EAC7CC,iBAAiB,EAAE,eAAe;EAClCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;AAEjD,MAAMQ,QAAQ,GAAG,IAAIf,kBAAkB,CAAC,CAAC;AAEzCe,QAAQ,CAACC,mBAAmB,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,CAAC,CAAC;AAE7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KAAMpB,eAAe,CAACmB,IAAI,EAACH,QAAQ,CAAC;AAEzE,OAAO,MAAMK,EAAE,GAAGlB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,eAAAA,CAAOC,QAAQ,EAAiC;EAAA,IAA/BC,qBAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACnF,IAAG,CAACF,QAAQ,EAAE;EACd,MAAMK,UAAU,GAAGxB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACM,GAAG,CAAC;EACjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EACvB,MAAMI,YAAY,GAAE,MAAM3B,MAAM,CAACuB,UAAU,CAAC;EAC5C;EACA,MAAM;IAACK,WAAW;IAACC,KAAK;IAACC,QAAQ;IAACN;EAAG,CAAC,GAAGN,QAAQ;EACjD,MAAMa,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC5B,IAAG,CAACL,YAAY,CAACM,MAAM,CAAC,CAAC,EAAC;IAExB,IAAG;MACC,MAAMhC,MAAM,CAACsB,UAAU,EAAC;QACtBK,WAAW;QACXC,KAAK;QACLL,GAAG;QACHM,QAAQ;QACRC,SAAS;QACT,GAAGZ;MACL,CAAC,CAAC;IACN,CAAC,QAAMe,CAAC,EAAC;MACLT,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAACQ,CAAC,CAACC,OAAO,CAAC;IAClE;EAEF,CAAC,MAAI;IACH,MAAMC,SAAS,GAAE,IAAIJ,IAAI,CAAC,CAAC;IACzB,IAAG;MACD,MAAM9B,SAAS,CAACqB,UAAU,EAAC;QACzBa;MACF,CAAC,CAAC;IACN,CAAC,QAAMF,CAAC,EAAC;MACLT,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAACQ,CAAC,CAACC,OAAO,CAAC;IAClE;IACE,OAAOZ,UAAU;EACpB;EAAC;AAIJ,CAAC;AAED,OAAO,MAAMc,8BAA8B,GAAG,MAAAA,CAAOR,KAAK,EAACS,QAAQ,KAAK;EACtE,IAAG,CAACT,KAAK,IAAI,CAACS,QAAQ,EAAE;EACxB,OAAO,MAAMzC,8BAA8B,CAACiB,IAAI,EAAEe,KAAK,EAAES,QAAQ,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}